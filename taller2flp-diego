#lang eopl
;la base 32 utiliza simbolos del 0-31
( define zero ( lambda ( ) '( ) ) )

( define is-zero? ( lambda ( n ) ( null? n ) ) )

( define successor ( lambda ( n ) (if (is-zero? n)(cons 1 n)
                                      (if (< (car n) 31)
                                      (cons (+(car n) 1) (cdr n))
                                            (cons 0 (successor (cdr n)))))) ) 

( define predecessor ( lambda ( n ) (if (and(eq?(car n)0)(not(>(length n)1)))(eopl:error "no hay predecesor del 0" )
                                        (cond
                                          [(and (>(car n)0) (not (is-zero?(cdr n))) ) (cons(-(car n)1) (cdr n)) ]
                                          [(eq?(length n)1) (list (- (car n) 1))]
                                          [(and (>(car n)0) (not (is-zero?(cdr n))) (not(eq?(car n)1))) (cons(-(car n)1) (cdr n)) ]; 
                                          [(and(eq? (car n ) 0 ) (is-zero?(cddr n)) (>(cadr n)1) ) (list 0 (-(cadr n)1))]
                                          [(and(eq? (car n ) 0 )(not (is-zero?(cddr n)))) (cons 0 (predecessor (cdr n)))  ]
                                          [else (cons 31 (zero)) ]))))
                                        














                                